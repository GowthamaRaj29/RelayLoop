import { useState } from 'react';

/**
 * PredictionGenerator component allows admins to generate readmission predictions
 * either manually by selecting patients or automatically within a time range
 */
export default function PredictionGenerator({ 
  isOpen, 
  onClose, 
  selectedPatients, 
  isPredicting,
  setIsPredicting,
  onPatientSelectionChange
}) {
  const [mode, setMode] = useState('manual'); // 'manual' or 'automatic'
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [status, setStatus] = useState(null);
  const [autoScheduleActive, setAutoScheduleActive] = useState(false);

  // Handle mode change
  const handleModeChange = (newMode) => {
    setMode(newMode);
    setStatus(null); // Reset status when changing modes
  };

  // Handle date range selection in automatic mode
  const handleDateRangeChange = (e) => {
    setDateRange({
      ...dateRange,
      [e.target.name]: e.target.value
    });
  };

  // Generate predictions based on mode
  const handleGeneratePredictions = async () => {
    setIsPredicting(true);
    setStatus({ type: 'info', message: 'Generating predictions...' });

    try {
      if (mode === 'manual' && selectedPatients.length === 0) {
        throw new Error('Please select at least one patient');
      }
      
      if (mode === 'automatic' && (!dateRange.start || !dateRange.end)) {
        throw new Error('Please select start and end dates');
      }
      
      // Simulate API call delay
      setTimeout(() => {
        // In a real app, this would make API calls to generate predictions
        
        // Example success response
        if (mode === 'manual') {
          setStatus({
            type: 'success',
            message: `Successfully generated predictions for ${selectedPatients.length} patients.`,
            details: {
              total: selectedPatients.length,
              highRisk: Math.floor(Math.random() * selectedPatients.length * 0.3),
              mediumRisk: Math.floor(Math.random() * selectedPatients.length * 0.4),
              lowRisk: Math.floor(Math.random() * selectedPatients.length * 0.3)
            }
          });
        } else {
          const totalPatients = Math.floor(Math.random() * 50) + 10;
          setStatus({
            type: 'success',
            message: `Successfully generated predictions for ${totalPatients} patients in the date range.`,
            details: {
              total: totalPatients,
              highRisk: Math.floor(Math.random() * totalPatients * 0.3),
              mediumRisk: Math.floor(Math.random() * totalPatients * 0.4),
              lowRisk: Math.floor(Math.random() * totalPatients * 0.3)
            }
          });
        }
        
        setIsPredicting(false);
      }, 2500);
    } catch (error) {
      console.error('Error generating predictions:', error);
      setStatus({
        type: 'error',
        message: error.message || 'Failed to generate predictions'
      });
      setIsPredicting(false);
    }
  };

  // Toggle auto-scheduling
  const toggleAutoSchedule = () => {
    if (autoScheduleActive) {
      setAutoScheduleActive(false);
      setStatus({
        type: 'info',
        message: 'Automatic prediction generation disabled.'
      });
    } else {
      if (!dateRange.start || !dateRange.end) {
        setStatus({
          type: 'error',
          message: 'Please select start and end dates before enabling automatic mode.'
        });
        return;
      }
      
      setAutoScheduleActive(true);
      setStatus({
        type: 'success',
        message: 'Automatic prediction generation enabled. System will generate predictions daily.'
      });
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div className="fixed inset-0 transition-opacity" aria-hidden="true">
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        {/* Modal panel */}
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="w-full">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-800">
                    Readmission Prediction Generator
                  </h2>
                  <button 
                    onClick={onClose}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                {/* Mode selection tabs */}
                <div className="flex mb-6 border-b">
                  <button 
                    className={`py-2 px-4 ${mode === 'manual' ? 'border-b-2 border-indigo-600 text-indigo-600 font-medium' : 'text-gray-500'}`}
                    onClick={() => handleModeChange('manual')}
                  >
                    Manual Selection
                  </button>
                  <button 
                    className={`py-2 px-4 ${mode === 'automatic' ? 'border-b-2 border-indigo-600 text-indigo-600 font-medium' : 'text-gray-500'}`}
                    onClick={() => handleModeChange('automatic')}
                  >
                    Automatic/Scheduled
                  </button>
                </div>
                
                {/* Manual mode content */}
                {mode === 'manual' && (
                  <div className="mb-6">
                    <div className="mb-4">
                      <h3 className="text-lg font-medium text-gray-800 mb-2">Selected Patients</h3>
                      {selectedPatients && selectedPatients.length > 0 ? (
                        <div className="bg-gray-50 p-4 rounded-md">
                          <p className="text-sm text-gray-600 mb-2">
                            <span className="font-semibold">{selectedPatients.length}</span> patients selected
                          </p>
                          <div className="flex flex-wrap gap-2">
                            {selectedPatients.slice(0, 5).map(id => (
                              <div key={id} className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded text-xs">
                                ID: {id}
                              </div>
                            ))}
                            {selectedPatients.length > 5 && (
                              <div className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded text-xs">
                                +{selectedPatients.length - 5} more
                              </div>
                            )}
                          </div>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-500">No patients selected. Use the checkboxes in the patients table to select patients.</p>
                      )}
                    </div>
                    
                    <button 
                      className={`
                        bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 
                        ${
                          isPredicting ? 'opacity-50 cursor-not-allowed' : ''
                        }
                      `}
                      onClick={handleGeneratePredictions}
                      disabled={isPredicting || selectedPatients.length === 0}
                    >
                      {isPredicting ? 'Generating...' : 'Generate Predictions'}
                    </button>
                  </div>
                )}
                
                {/* Automatic mode content */}
                {mode === 'automatic' && (
                  <div>
                    <div className="mb-6">
                      <h3 className="text-lg font-medium text-gray-800 mb-2">Date Range</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="start" className="block text-sm font-medium text-gray-700 mb-1">
                            Start Date
                          </label>
                          <input 
                            type="date" 
                            id="start" 
                            name="start"
                            value={dateRange.start}
                            onChange={handleDateRangeChange}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            disabled={autoScheduleActive}
                          />
                        </div>
                        <div>
                          <label htmlFor="end" className="block text-sm font-medium text-gray-700 mb-1">
                            End Date
                          </label>
                          <input 
                            type="date" 
                            id="end" 
                            name="end"
                            value={dateRange.end}
                            onChange={handleDateRangeChange}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            disabled={autoScheduleActive}
                          />
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex space-x-4">
                      <button 
                        className={`
                          bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500
                          ${
                            (isPredicting || autoScheduleActive) ? 'opacity-50 cursor-not-allowed' : ''
                          }
                        `}
                        onClick={handleGeneratePredictions}
                        disabled={isPredicting || autoScheduleActive || !dateRange.start || !dateRange.end}
                      >
                        {isPredicting ? 'Generating...' : 'Generate Once'}
                      </button>
                      
                      <button 
                        className={`
                          ${autoScheduleActive ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'} 
                          text-white font-medium py-2 px-4 rounded focus:outline-none focus:ring-2 focus:ring-green-500
                          ${
                            isPredicting ? 'opacity-50 cursor-not-allowed' : ''
                          }
                        `}
                        onClick={toggleAutoSchedule}
                        disabled={isPredicting || (!dateRange.start || !dateRange.end) && !autoScheduleActive}
                      >
                        {autoScheduleActive ? 'Deactivate Auto-Schedule' : 'Activate Auto-Schedule'}
                      </button>
                    </div>
                  </div>
                )}
                
                {/* Status and results */}
                {status && (
                  <div className={`mt-8 p-4 rounded-md ${
                    status.type === 'success' ? 'bg-green-50 border border-green-200' :
                    status.type === 'error' ? 'bg-red-50 border border-red-200' :
                    'bg-blue-50 border border-blue-200'
                  }`}>
                    <h3 className={`text-lg font-medium mb-2 ${
                      status.type === 'success' ? 'text-green-800' :
                      status.type === 'error' ? 'text-red-800' :
                      'text-blue-800'
                    }`}>
                      {status.type === 'success' ? 'Success' :
                      status.type === 'error' ? 'Error' :
                      'Information'}
                    </h3>
                    
                    <p className={`text-sm ${
                      status.type === 'success' ? 'text-green-600' :
                      status.type === 'error' ? 'text-red-600' :
                      'text-blue-600'
                    }`}>
                      {status.message}
                    </p>
                    
                    {status.details && status.type === 'success' && (
                      <div className="mt-4 bg-white p-3 rounded-md shadow-sm">
                        <h4 className="font-medium text-gray-700 mb-2">Prediction Results:</h4>
                        <div className="grid grid-cols-4 gap-2 text-sm">
                          <div className="bg-gray-100 p-2 rounded flex flex-col items-center">
                            <span className="text-gray-500">Total</span>
                            <span className="font-bold text-gray-800">{status.details.total}</span>
                          </div>
                          <div className="bg-red-100 p-2 rounded flex flex-col items-center">
                            <span className="text-red-500">High Risk</span>
                            <span className="font-bold text-red-800">{status.details.highRisk}</span>
                          </div>
                          <div className="bg-yellow-100 p-2 rounded flex flex-col items-center">
                            <span className="text-yellow-600">Medium Risk</span>
                            <span className="font-bold text-yellow-700">{status.details.mediumRisk}</span>
                          </div>
                          <div className="bg-green-100 p-2 rounded flex flex-col items-center">
                            <span className="text-green-500">Low Risk</span>
                            <span className="font-bold text-green-800">{status.details.lowRisk}</span>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {status.details && status.type === 'error' && (
                      <div className="mt-4 bg-white p-3 rounded-md shadow-sm">
                        <h4 className="font-medium text-red-700 mb-2">Error Details:</h4>
                        <pre className="text-xs bg-gray-50 p-2 rounded overflow-x-auto">
                          {status.details.error}
                        </pre>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              onClick={onClose}
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
