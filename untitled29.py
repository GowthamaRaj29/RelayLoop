# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JAvfFr4LXGr9N8RnAbBGYlMWmqRQjBYp
"""





# ENHANCED HOSPITAL READMISSION PREDICTION SYSTEM
# Advanced version with comprehensive medical conditions and improved accuracy

# =============================================================================
# STEP 1: IMPORTS AND SETUP
# =============================================================================

!pip install scikit-learn pandas numpy matplotlib seaborn -q

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, LabelEncoder, RobustScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, roc_auc_score, f1_score
import warnings
import os
warnings.filterwarnings('ignore')
np.random.seed(42)

print("‚úÖ Enhanced medical prediction system loaded!")

# =============================================================================
# STEP 2: ENHANCED AGE MERGER CLASS
# =============================================================================

class EnhancedAgeMerger:
    """Advanced age format merging with better risk stratification"""

    def __init__(self):
        self.age_mapping = {
            'Q1_18-35': 'Young_Adult', 'Q2_36-50': 'Middle_Adult', 'Q3_51-65': 'Mature_Adult',
            'Q4_66-80': 'Senior', 'Q5_81+': 'Elderly',
            '18-30': 'Young_Adult', '31-45': 'Middle_Adult', '46-60': 'Mature_Adult',
            '61-75': 'Senior', '76-90': 'Elderly',
            '[18-30)': 'Young_Adult', '[31-45)': 'Middle_Adult', '[46-60)': 'Mature_Adult',
            '[61-75)': 'Senior', '[76-90)': 'Elderly'
        }

        self.age_ranges = {
            'Young_Adult': (18, 35), 'Middle_Adult': (36, 50), 'Mature_Adult': (51, 65),
            'Senior': (66, 80), 'Elderly': (81, 95)
        }

        # Age-based risk multipliers
        self.age_risk_multipliers = {
            'Young_Adult': 1.0, 'Middle_Adult': 1.2, 'Mature_Adult': 1.4,
            'Senior': 1.7, 'Elderly': 2.1
        }

    def standardize_age_group(self, age_value):
        if pd.isna(age_value):
            return 'Unknown'
        if isinstance(age_value, str):
            return self.age_mapping.get(age_value.strip(), 'Unknown')
        elif isinstance(age_value, (int, float)):
            for group, (min_age, max_age) in self.age_ranges.items():
                if min_age <= age_value <= max_age:
                    return group
            return 'Unknown'
        return 'Unknown'

    def get_age_risk_multiplier(self, age_group):
        return self.age_risk_multipliers.get(age_group, 1.0)

# =============================================================================
# STEP 3: ENHANCED PREDICTION SYSTEM WITH COMPREHENSIVE MEDICAL CONDITIONS
# =============================================================================

class EnhancedMedicalPredictor:
    """Advanced medical readmission predictor with comprehensive conditions"""

    def __init__(self):
        self.age_merger = EnhancedAgeMerger()
        self.models = {}
        self.scalers = {}
        self.label_encoders = {}
        self.feature_columns = []
        self.is_trained = False
        self.historical_data = None

        # Enhanced risk thresholds for better sensitivity
        self.risk_thresholds = {
            'low': (0.0, 0.25),      # 0-25%
            'medium': (0.25, 0.55),   # 25-55%
            'high': (0.55, 1.0)       # 55-100%
        }

        # Comprehensive clinical risk weights
        self.clinical_weights = {
            # Demographics
            'age_elderly': 0.12,
            'age_senior': 0.08,

            # Chronic conditions
            'diabetes': 0.10,
            'hypertension': 0.08,
            'heart_disease': 0.12,
            'kidney_disease': 0.15,
            'respiratory_disease': 0.12,

            # Hospital stay factors
            'icu_admission': 0.20,
            'semi_intensive_admission': 0.15,
            'regular_ward_admission': 0.05,
            'long_stay': 0.10,

            # Lab abnormalities
            'low_hemoglobin': 0.08,
            'abnormal_hematocrit': 0.06,
            'low_platelets': 0.10,
            'abnormal_rbc': 0.06,
            'low_lymphocytes': 0.08,
            'high_urea': 0.10,
            'electrolyte_imbalance': 0.08,

            # Other factors
            'covid_positive': 0.15,
            'frequent_admissions': 0.12,
            'high_medications': 0.08,
            'multiple_comorbidities': 0.18
        }

        # Normal lab value ranges
        self.normal_ranges = {
            'hemoglobin': {'male': (13.8, 17.2), 'female': (12.1, 15.1)},  # g/dL
            'hematocrit': {'male': (40.7, 50.3), 'female': (36.1, 44.3)},  # %
            'platelets': (150, 400),  # x10¬≥/ŒºL
            'rbc': {'male': (4.7, 6.1), 'female': (4.2, 5.4)},  # x10‚Å∂/ŒºL
            'lymphocytes': (1.0, 4.0),  # x10¬≥/ŒºL
            'urea': (2.5, 7.5),  # mmol/L
            'potassium': (3.5, 5.0),  # mmol/L
            'sodium': (136, 145)  # mmol/L
        }

    def load_datasets(self):
        """Load datasets with enhanced medical conditions"""
        print("üîÑ Loading enhanced medical datasets...")

        csv_files = [f for f in os.listdir('.') if f.endswith('.csv')]
        print(f"üìÅ Found {len(csv_files)} CSV files: {csv_files}")

        datasets_loaded = False
        dataset1_df = None
        dataset2_df = None

        if len(csv_files) >= 2:
            try:
                dataset1_df = pd.read_csv(csv_files[0])
                dataset2_df = pd.read_csv(csv_files[1])
                print(f"‚úÖ Loaded user datasets: {csv_files[0]} ({dataset1_df.shape}) and {csv_files[1]} ({dataset2_df.shape})")
                datasets_loaded = True
            except Exception as e:
                print(f"‚ö†Ô∏è  Error loading user datasets: {e}")

        if not datasets_loaded:
            print("üìù Creating enhanced sample datasets with comprehensive medical data...")
            dataset1_df, dataset2_df = self._create_enhanced_sample_datasets()

        return dataset1_df, dataset2_df

    def _create_enhanced_sample_datasets(self):
        """Create comprehensive sample datasets with all medical conditions"""
        np.random.seed(42)

        # Enhanced Dataset 1 (Age Quantiles) with comprehensive medical data
        n1 = 2000

        # Create realistic correlations between conditions
        ages = np.random.choice(['Q1_18-35', 'Q2_36-50', 'Q3_51-65', 'Q4_66-80', 'Q5_81+'], n1)

        dataset1_df = pd.DataFrame({
            'patient_id': [f'P1_{i:04d}' for i in range(n1)],
            'patient_age_quantile': ages,
            'gender': np.random.choice(['M', 'F'], n1),

            # Chronic conditions (age-correlated)
            'diabetes': np.random.choice([0, 1], n1, p=[0.65, 0.35]),
            'hypertension': np.random.choice([0, 1], n1, p=[0.55, 0.45]),
            'heart_disease': np.random.choice([0, 1], n1, p=[0.75, 0.25]),
            'kidney_disease': np.random.choice([0, 1], n1, p=[0.80, 0.20]),
            'respiratory_disease': np.random.choice([0, 1], n1, p=[0.78, 0.22]),

            # Hospital admission types
            'regular_ward_admission': np.random.choice([0, 1], n1, p=[0.30, 0.70]),
            'semi_intensive_unit_admission': np.random.choice([0, 1], n1, p=[0.85, 0.15]),
            'intensive_care_unit_admission': np.random.choice([0, 1], n1, p=[0.90, 0.10]),

            # Lab values with realistic distributions
            'hemoglobin': np.random.normal(13.5, 2.1, n1).clip(6, 18),
            'hematocrit': np.random.normal(40.2, 5.8, n1).clip(25, 55),
            'platelets': np.random.normal(275, 85, n1).clip(50, 600),
            'red_blood_cells': np.random.normal(4.8, 0.7, n1).clip(2.5, 7.0),
            'lymphocytes': np.random.normal(2.2, 0.8, n1).clip(0.5, 6.0),
            'urea': np.random.normal(5.2, 2.8, n1).clip(1.0, 15.0),
            'potassium': np.random.normal(4.1, 0.6, n1).clip(2.5, 6.0),
            'sodium': np.random.normal(140, 4.2, n1).clip(125, 155),

            # COVID-19 and other factors
            'sars_cov2_exam_result': np.random.choice([0, 1], n1, p=[0.88, 0.12]),
            'length_of_stay': np.random.exponential(4, n1).clip(1, 30),
            'num_medications': np.random.poisson(9, n1),
            'previous_admissions': np.random.poisson(1.2, n1),

            # Readmission outcome (correlated with risk factors)
            'readmitted_30_days': np.random.choice([0, 1], n1, p=[0.80, 0.20])
        })

        # Enhanced Dataset 2 (Age Ranges)
        n2 = 1500
        ages2 = np.random.choice(['18-30', '31-45', '46-60', '61-75', '76-90'], n2)

        dataset2_df = pd.DataFrame({
            'patient_id': [f'P2_{i:04d}' for i in range(n2)],
            'patient_age_quantile': ages2,  # Using age ranges but same column name
            'gender': np.random.choice(['Male', 'Female'], n2),

            # Medical conditions
            'diabetes': np.random.choice([0, 1], n2, p=[0.68, 0.32]),
            'hypertension': np.random.choice([0, 1], n2, p=[0.58, 0.42]),
            'heart_disease': np.random.choice([0, 1], n2, p=[0.77, 0.23]),
            'kidney_disease': np.random.choice([0, 1], n2, p=[0.82, 0.18]),
            'respiratory_disease': np.random.choice([0, 1], n2, p=[0.76, 0.24]),

            # Hospital settings
            'regular_ward_admission': np.random.choice([0, 1], n2, p=[0.25, 0.75]),
            'semi_intensive_unit_admission': np.random.choice([0, 1], n2, p=[0.88, 0.12]),
            'intensive_care_unit_admission': np.random.choice([0, 1], n2, p=[0.92, 0.08]),

            # Lab values
            'hemoglobin': np.random.normal(13.2, 2.3, n2).clip(6, 18),
            'hematocrit': np.random.normal(39.8, 6.1, n2).clip(25, 55),
            'platelets': np.random.normal(265, 90, n2).clip(50, 600),
            'red_blood_cells': np.random.normal(4.6, 0.8, n2).clip(2.5, 7.0),
            'lymphocytes': np.random.normal(2.0, 0.9, n2).clip(0.5, 6.0),
            'urea': np.random.normal(5.8, 3.2, n2).clip(1.0, 15.0),
            'potassium': np.random.normal(4.0, 0.7, n2).clip(2.5, 6.0),
            'sodium': np.random.normal(139, 4.8, n2).clip(125, 155),

            'sars_cov2_exam_result': np.random.choice([0, 1], n2, p=[0.85, 0.15]),
            'length_of_stay': np.random.exponential(5, n2).clip(1, 30),
            'num_medications': np.random.poisson(8, n2),
            'previous_admissions': np.random.poisson(1.1, n2),
            'readmitted_30_days': np.random.choice([0, 1], n2, p=[0.83, 0.17])
        })

        print("‚úÖ Enhanced sample datasets created with comprehensive medical conditions!")
        return dataset1_df, dataset2_df

    def preprocess_datasets(self, df1, df2):
        """Enhanced preprocessing with comprehensive medical features"""
        print("üîÑ Processing comprehensive medical datasets...")

        # Standardize age groups
        age_col_1 = self._find_age_column(df1)
        age_col_2 = self._find_age_column(df2)

        df1['age_group'] = df1[age_col_1].apply(self.age_merger.standardize_age_group) if age_col_1 else 'Unknown'
        df2['age_group'] = df2[age_col_2].apply(self.age_merger.standardize_age_group) if age_col_2 else 'Unknown'

        # Find readmission columns
        readmit_col_1 = self._find_readmission_column(df1)
        readmit_col_2 = self._find_readmission_column(df2)

        # Create enhanced unified features
        df1_processed = self._create_enhanced_unified_features(df1, 'dataset1', readmit_col_1)
        df2_processed = self._create_enhanced_unified_features(df2, 'dataset2', readmit_col_2)

        # Combine datasets
        combined_df = pd.concat([df1_processed, df2_processed], ignore_index=True)
        combined_df = combined_df.dropna(subset=['readmitted_30_days'])

        # Create additional risk features
        combined_df = self._create_risk_features(combined_df)

        self.historical_data = combined_df
        readmission_rate = combined_df['readmitted_30_days'].mean() * 100

        print(f"‚úÖ Enhanced combined dataset: {len(combined_df)} patients")
        print(f"üìä Overall readmission rate: {readmission_rate:.1f}%")

        return combined_df

    def _find_age_column(self, df):
        """Find age column with enhanced detection"""
        for col in df.columns:
            col_lower = col.lower()
            if any(keyword in col_lower for keyword in ['age', 'quantile', 'q1', 'q2', 'range']):
                return col
        return None

    def _find_readmission_column(self, df):
        """Find readmission column"""
        for col in df.columns:
            col_lower = col.lower()
            if any(keyword in col_lower for keyword in ['readmit', 'readmission', 'target']):
                return col
        return df.columns[-1]

    def _create_enhanced_unified_features(self, df, source, readmit_col):
        """Create comprehensive unified feature set"""
        unified_data = {
            'patient_id': df.iloc[:, 0] if len(df.columns) > 0 else range(len(df)),
            'age_group': df.get('age_group', 'Unknown'),
            'dataset_source': source,
            'readmitted_30_days': df[readmit_col] if readmit_col in df.columns else 0
        }

        # Comprehensive feature mappings
        feature_mappings = {
            'gender': ['gender', 'sex'],
            'diabetes': ['diabetes'],
            'hypertension': ['hypertension', 'hyperten'],
            'heart_disease': ['heart', 'cardiac'],
            'kidney_disease': ['kidney', 'renal'],
            'respiratory_disease': ['respiratory', 'lung', 'copd'],

            # Hospital admission types
            'regular_ward_admission': ['regular_ward', 'ward'],
            'semi_intensive_unit_admission': ['semi_intensive', 'semi'],
            'intensive_care_unit_admission': ['intensive_care', 'icu'],

            # Lab values
            'hemoglobin': ['hemoglobin', 'hb'],
            'hematocrit': ['hematocrit', 'hct'],
            'platelets': ['platelets', 'plt'],
            'red_blood_cells': ['red_blood', 'rbc'],
            'lymphocytes': ['lymphocytes', 'lymph'],
            'urea': ['urea'],
            'potassium': ['potassium', 'k'],
            'sodium': ['sodium', 'na'],

            # Other factors
            'sars_cov2_exam_result': ['sars', 'covid', 'cov'],
            'length_of_stay': ['length', 'stay', 'los'],
            'num_medications': ['medication', 'drug', 'med'],
            'previous_admissions': ['admission', 'previous']
        }

        for feature, keywords in feature_mappings.items():
            for col in df.columns:
                col_lower = col.lower()
                if any(keyword in col_lower for keyword in keywords):
                    if feature == 'gender':
                        unified_data[feature] = df[col]
                    else:
                        unified_data[feature] = pd.to_numeric(df[col], errors='coerce').fillna(0)
                    break

        # Fill missing features with defaults
        defaults = {
            'gender': 'Unknown',
            'diabetes': 0, 'hypertension': 0, 'heart_disease': 0, 'kidney_disease': 0, 'respiratory_disease': 0,
            'regular_ward_admission': 1, 'semi_intensive_unit_admission': 0, 'intensive_care_unit_admission': 0,
            'hemoglobin': 13.0, 'hematocrit': 40.0, 'platelets': 250.0, 'red_blood_cells': 4.5,
            'lymphocytes': 2.0, 'urea': 5.0, 'potassium': 4.0, 'sodium': 140.0,
            'sars_cov2_exam_result': 0, 'length_of_stay': 5.0, 'num_medications': 5, 'previous_admissions': 0
        }

        for feature, default in defaults.items():
            if feature not in unified_data:
                unified_data[feature] = default

        return pd.DataFrame(unified_data)

    def _create_risk_features(self, df):
        """Create additional risk features from lab values and conditions"""
        # Comorbidity score
        df['comorbidity_count'] = (
            df['diabetes'] + df['hypertension'] + df['heart_disease'] +
            df['kidney_disease'] + df['respiratory_disease']
        )

        # Lab abnormality flags
        df['low_hemoglobin'] = (df['hemoglobin'] < 12).astype(int)
        df['abnormal_hematocrit'] = ((df['hematocrit'] < 35) | (df['hematocrit'] > 50)).astype(int)
        df['low_platelets'] = (df['platelets'] < 150).astype(int)
        df['abnormal_rbc'] = ((df['red_blood_cells'] < 4.0) | (df['red_blood_cells'] > 6.0)).astype(int)
        df['low_lymphocytes'] = (df['lymphocytes'] < 1.0).astype(int)
        df['high_urea'] = (df['urea'] > 7.5).astype(int)
        df['electrolyte_imbalance'] = ((df['potassium'] < 3.5) | (df['potassium'] > 5.0) |
                                      (df['sodium'] < 136) | (df['sodium'] > 145)).astype(int)

        # Critical care indicator
        df['critical_care'] = df['intensive_care_unit_admission']

        return df

    def train_enhanced_models(self, df):
        """Train enhanced models with better performance"""
        print("ü§ñ Training enhanced prediction models for >90% accuracy...")

        X, y = self._prepare_enhanced_features(df)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42, stratify=y)

        # Enhanced scalers
        self.scalers['robust'] = RobustScaler()
        self.scalers['standard'] = StandardScaler()

        X_train_robust = self.scalers['robust'].fit_transform(X_train)
        X_test_robust = self.scalers['robust'].transform(X_test)
        X_train_standard = self.scalers['standard'].fit_transform(X_train)
        X_test_standard = self.scalers['standard'].transform(X_test)

        # Enhanced models with better parameters
        models = {
            'random_forest': RandomForestClassifier(n_estimators=200, max_depth=15, random_state=42,
                                                  class_weight='balanced', min_samples_split=5),
            'extra_trees': ExtraTreesClassifier(n_estimators=200, max_depth=15, random_state=42,
                                              class_weight='balanced', min_samples_split=5),
            'gradient_boosting': GradientBoostingClassifier(n_estimators=150, learning_rate=0.1,
                                                          max_depth=8, random_state=42),
            'logistic_regression': LogisticRegression(random_state=42, class_weight='balanced',
                                                    max_iter=2000, C=0.1)
        }

        best_accuracy = 0
        for name, model in models.items():
            try:
                if name == 'logistic_regression':
                    model.fit(X_train_standard, y_train)
                    y_pred = model.predict(X_test_standard)
                    y_prob = model.predict_proba(X_test_standard)[:, 1]
                else:
                    model.fit(X_train, y_train)
                    y_pred = model.predict(X_test)
                    y_prob = model.predict_proba(X_test)[:, 1]

                self.models[name] = model
                accuracy = accuracy_score(y_test, y_pred)
                auc = roc_auc_score(y_test, y_prob) if len(np.unique(y_test)) > 1 else 0.5
                f1 = f1_score(y_test, y_pred)

                if accuracy > best_accuracy:
                    best_accuracy = accuracy

                print(f"  ‚úÖ {name.replace('_', ' ').title()}: Accuracy={accuracy:.3f}, AUC={auc:.3f}, F1={f1:.3f}")

            except Exception as e:
                print(f"  ‚ùå Error training {name}: {e}")

        self.is_trained = True
        print(f"üéØ Best model accuracy: {best_accuracy:.3f}")
        if best_accuracy >= 0.90:
            print("üèÜ Target accuracy >90% achieved!")
        else:
            print("‚ö†Ô∏è  Working to improve accuracy further...")

    def _prepare_enhanced_features(self, df):
        """Prepare comprehensive feature set"""
        categorical_cols = ['age_group', 'gender', 'dataset_source']

        for col in categorical_cols:
            if col in df.columns:
                if col not in self.label_encoders:
                    self.label_encoders[col] = LabelEncoder()
                    df[f'{col}_encoded'] = self.label_encoders[col].fit_transform(df[col].astype(str))

        # Comprehensive feature list
        feature_cols = [col for col in df.columns if col.endswith('_encoded') or col in [
            'diabetes', 'hypertension', 'heart_disease', 'kidney_disease', 'respiratory_disease',
            'regular_ward_admission', 'semi_intensive_unit_admission', 'intensive_care_unit_admission',
            'hemoglobin', 'hematocrit', 'platelets', 'red_blood_cells', 'lymphocytes', 'urea', 'potassium', 'sodium',
            'sars_cov2_exam_result', 'length_of_stay', 'num_medications', 'previous_admissions',
            'comorbidity_count', 'low_hemoglobin', 'abnormal_hematocrit', 'low_platelets', 'abnormal_rbc',
            'low_lymphocytes', 'high_urea', 'electrolyte_imbalance', 'critical_care'
        ]]

        self.feature_columns = [col for col in feature_cols if col in df.columns]
        X = df[self.feature_columns].fillna(0)
        y = df['readmitted_30_days']
        return X, y

    def predict_enhanced_patient_risk(self, patient_data):
        """Enhanced prediction with comprehensive medical assessment"""
        if not self.is_trained:
            raise ValueError("‚ùå System must be trained before making predictions!")

        try:
            # Calculate enhanced clinical risk
            clinical_score, risk_factors = self._calculate_enhanced_clinical_score(patient_data)

            # Get ML predictions from all models
            ml_predictions = []
            patient_features = self._prepare_enhanced_patient_features(patient_data)

            for name, model in self.models.items():
                try:
                    if name == 'logistic_regression':
                        X_scaled = self.scalers['standard'].transform([patient_features])
                        prob = model.predict_proba(X_scaled)[:, 1][0]
                    else:
                        prob = model.predict_proba([patient_features])[:, 1][0]
                    ml_predictions.append(prob)
                except:
                    ml_predictions.append(0.25)

            ml_probability = np.mean(ml_predictions) if ml_predictions else 0.25

            # Enhanced combination with age multiplier
            age_group = self.age_merger.standardize_age_group(patient_data.get('age', patient_data.get('patient_age_quantile', 50)))
            age_multiplier = self.age_merger.get_age_risk_multiplier(age_group)

            # Weighted combination: 60% ML, 40% clinical, with age multiplier
            base_probability = (0.60 * ml_probability) + (0.40 * clinical_score)
            final_probability = min(base_probability * age_multiplier, 1.0)

            # Critical condition overrides
            if self._has_critical_conditions(patient_data):
                final_probability = max(final_probability, 0.70)
                risk_factors.append('Critical medical conditions detected')

            # ICU admission override
            if patient_data.get('intensive_care_unit_admission', 0) == 1:
                final_probability = max(final_probability, 0.65)
                risk_factors.append('ICU admission - high risk')

            risk_level = self._get_enhanced_risk_level(final_probability)

            return {
                'patient_id': patient_data.get('patient_id', 'unknown'),
                'risk_level': risk_level,
                'risk_percentage': final_probability * 100,
                'ml_probability': ml_probability * 100,
                'clinical_score': clinical_score * 100,
                'age_multiplier': age_multiplier,
                'risk_factors': risk_factors,
                'recommendation': self._get_enhanced_recommendation(risk_level, final_probability),
                'confidence': self._calculate_enhanced_confidence(ml_predictions, clinical_score),
                'age_group': age_group
            }

        except Exception as e:
            return {
                'patient_id': patient_data.get('patient_id', 'unknown'),
                'error': f"Enhanced prediction error: {str(e)}",
                'risk_level': 'error'
            }

    def _prepare_enhanced_patient_features(self, patient_data):
        """Prepare comprehensive patient features"""
        age_group = self.age_merger.standardize_age_group(
            patient_data.get('age', patient_data.get('patient_age_quantile', 50))
        )

        features = []

        # Encoded features
        if 'age_group' in self.label_encoders:
            try:
                age_encoded = self.label_encoders['age_group'].transform([age_group])[0]
            except:
                age_encoded = 0
        else:
            age_encoded = 0
        features.append(age_encoded)

        gender = patient_data.get('gender', 'Unknown')
        if 'gender' in self.label_encoders:
            try:
                gender_encoded = self.label_encoders['gender'].transform([str(gender)])[0]
            except:
                gender_encoded = 0
        else:
            gender_encoded = 0
        features.append(gender_encoded)

        features.append(0)  # dataset_source

        # All medical features
        medical_features = [
            'diabetes', 'hypertension', 'heart_disease', 'kidney_disease', 'respiratory_disease',
            'regular_ward_admission', 'semi_intensive_unit_admission', 'intensive_care_unit_admission',
            'hemoglobin', 'hematocrit', 'platelets', 'red_blood_cells', 'lymphocytes', 'urea', 'potassium', 'sodium',
            'sars_cov2_exam_result', 'length_of_stay', 'num_medications', 'previous_admissions'
        ]

        for feature in medical_features:
            value = patient_data.get(feature, 0)
            try:
                features.append(float(value))
            except:
                features.append(0.0)

        # Calculated features
        comorbidity_count = sum([
            patient_data.get('diabetes', 0), patient_data.get('hypertension', 0),
            patient_data.get('heart_disease', 0), patient_data.get('kidney_disease', 0),
            patient_data.get('respiratory_disease', 0)
        ])
        features.append(comorbidity_count)

        # Lab abnormality features
        hb = patient_data.get('hemoglobin', 13.0)
        hct = patient_data.get('hematocrit', 40.0)
        plt = patient_data.get('platelets', 250.0)
        rbc = patient_data.get('red_blood_cells', 4.5)
        lymph = patient_data.get('lymphocytes', 2.0)
        urea = patient_data.get('urea', 5.0)
        k = patient_data.get('potassium', 4.0)
        na = patient_data.get('sodium', 140.0)

        features.extend([
            1 if hb < 12 else 0,  # low_hemoglobin
            1 if (hct < 35 or hct > 50) else 0,  # abnormal_hematocrit
            1 if plt < 150 else 0,  # low_platelets
            1 if (rbc < 4.0 or rbc > 6.0) else 0,  # abnormal_rbc
            1 if lymph < 1.0 else 0,  # low_lymphocytes
            1 if urea > 7.5 else 0,  # high_urea
            1 if (k < 3.5 or k > 5.0 or na < 136 or na > 145) else 0,  # electrolyte_imbalance
            patient_data.get('intensive_care_unit_admission', 0)  # critical_care
        ])

        return features

    def _calculate_enhanced_clinical_score(self, patient_data):
        """Calculate comprehensive clinical risk score"""
        risk_score = 0.0
        risk_factors = []

        # Age factors with graduated risk
        age_group = self.age_merger.standardize_age_group(
            patient_data.get('age', patient_data.get('patient_age_quantile', 50))
        )

        if age_group == 'Elderly':
            risk_score += self.clinical_weights['age_elderly']
            risk_factors.append('Advanced age (80+ years) - very high risk')
        elif age_group == 'Senior':
            risk_score += self.clinical_weights['age_senior']
            risk_factors.append('Senior age (65-80 years) - increased risk')

        # Chronic conditions with individual weights
        conditions = {
            'diabetes': 'Diabetes mellitus',
            'hypertension': 'Hypertension',
            'heart_disease': 'Heart disease',
            'kidney_disease': 'Kidney disease',
            'respiratory_disease': 'Respiratory disease'
        }

        active_conditions = []
        for condition, label in conditions.items():
            if patient_data.get(condition, 0) == 1:
                risk_score += self.clinical_weights.get(condition, 0.08)
                active_conditions.append(label)

        if len(active_conditions) >= 3:
            risk_score += self.clinical_weights['multiple_comorbidities']
            risk_factors.append(f'Multiple comorbidities: {", ".join(active_conditions)}')
        elif active_conditions:
            risk_factors.extend(active_conditions)

        # Hospital admission severity
        if patient_data.get('intensive_care_unit_admission', 0) == 1:
            risk_score += self.clinical_weights['icu_admission']
            risk_factors.append('ICU admission - critical condition')
        elif patient_data.get('semi_intensive_unit_admission', 0) == 1:
            risk_score += self.clinical_weights['semi_intensive_admission']
            risk_factors.append('Semi-intensive unit admission')

        # Lab abnormalities
        lab_checks = [
            ('hemoglobin', 12, 'low_hemoglobin', 'Low hemoglobin (anemia)'),
            ('platelets', 150, 'low_platelets', 'Low platelets (thrombocytopenia)'),
            ('lymphocytes', 1.0, 'low_lymphocytes', 'Low lymphocytes (immunocompromised)'),
            ('urea', 7.5, 'high_urea', 'Elevated urea (kidney dysfunction)')
        ]

        for lab, threshold, weight_key, description in lab_checks:
            value = patient_data.get(lab, 0)
            if (lab == 'urea' and value > threshold) or (lab != 'urea' and value < threshold and value > 0):
                risk_score += self.clinical_weights.get(weight_key, 0.06)
                risk_factors.append(f'{description} ({value})')

        # Electrolyte imbalance
        k = patient_data.get('potassium', 4.0)
        na = patient_data.get('sodium', 140.0)
        if k < 3.5 or k > 5.0 or na < 136 or na > 145:
            risk_score += self.clinical_weights['electrolyte_imbalance']
            risk_factors.append(f'Electrolyte imbalance (K: {k}, Na: {na})')

        # COVID-19
        if patient_data.get('sars_cov2_exam_result', 0) == 1:
            risk_score += self.clinical_weights['covid_positive']
            risk_factors.append('COVID-19 positive')

        # Length of stay
        los = patient_data.get('length_of_stay', 5)
        if los > 10:
            risk_score += self.clinical_weights['long_stay']
            risk_factors.append(f'Extended hospitalization ({los} days)')

        # Frequent admissions
        prev_admissions = patient_data.get('previous_admissions', 0)
        if prev_admissions >= 2:
            risk_score += self.clinical_weights['frequent_admissions']
            risk_factors.append(f'Frequent admissions ({prev_admissions} in past year)')

        # High medication count
        medications = patient_data.get('num_medications', 5)
        if medications >= 10:
            risk_score += self.clinical_weights['high_medications']
            risk_factors.append(f'Polypharmacy ({medications} medications)')

        return min(risk_score, 1.0), risk_factors

    def _has_critical_conditions(self, patient_data):
        """Check for critical medical conditions"""
        critical_indicators = [
            patient_data.get('intensive_care_unit_admission', 0) == 1,
            patient_data.get('hemoglobin', 13) < 8,  # Severe anemia
            patient_data.get('platelets', 250) < 50,  # Severe thrombocytopenia
            patient_data.get('urea', 5) > 20,  # Severe kidney dysfunction
            patient_data.get('length_of_stay', 5) > 20,  # Very long stay
            sum([patient_data.get(c, 0) for c in ['diabetes', 'hypertension', 'heart_disease', 'kidney_disease', 'respiratory_disease']]) >= 4
        ]
        return any(critical_indicators)

    def _get_enhanced_risk_level(self, probability):
        """Enhanced risk level determination"""
        if probability >= 0.55:
            return 'high'
        elif probability >= 0.25:
            return 'medium'
        else:
            return 'low'

    def _get_enhanced_recommendation(self, risk_level, probability):
        """Enhanced clinical recommendations"""
        if risk_level == 'high':
            if probability >= 0.75:
                return "üö® URGENT: Comprehensive discharge planning, intensive case management, transitional care team, 24h post-discharge contact, consider delaying discharge"
            else:
                return "‚ö†Ô∏è HIGH RISK: Comprehensive discharge planning, case management, transitional care, 24-48h post-discharge contact"
        elif risk_level == 'medium':
            return "üìã MODERATE RISK: Enhanced discharge planning, medication reconciliation, patient education, 3-7 day follow-up"
        else:
            return "‚úÖ LOW RISK: Standard discharge planning, routine follow-up in 1-2 weeks, patient education materials"

    def _calculate_enhanced_confidence(self, ml_predictions, clinical_score):
        """Enhanced confidence calculation"""
        base_conf = 0.75
        if len(ml_predictions) > 1:
            agreement_bonus = max(0, 0.20 - np.std(ml_predictions))
        else:
            agreement_bonus = 0.10
        clinical_bonus = min(clinical_score * 0.15, 0.15)
        return min(base_conf + agreement_bonus + clinical_bonus, 1.0) * 100

# =============================================================================
# STEP 4: ENHANCED SYSTEM WRAPPER
# =============================================================================

class EnhancedPatientCentricSystem:
    """Enhanced system with comprehensive medical assessment"""

    def __init__(self):
        self.predictor = EnhancedMedicalPredictor()
        self.is_initialized = False

    def initialize_system(self, dataset1_df=None, dataset2_df=None):
        """Initialize enhanced system"""
        print("üè• Initializing Enhanced Patient-Centric Readmission Prediction System")
        print("=" * 75)

        try:
            if dataset1_df is None or dataset2_df is None:
                dataset1_df, dataset2_df = self.predictor.load_datasets()

            combined_data = self.predictor.preprocess_datasets(dataset1_df, dataset2_df)
            self.predictor.train_enhanced_models(combined_data)

            self.is_initialized = True

            total_patients = len(combined_data)
            readmission_rate = combined_data['readmitted_30_days'].mean() * 100

            print(f"‚úÖ Enhanced system initialized successfully!")
            print(f"üìä Training data: {total_patients:,} patients")
            print(f"üìà Readmission rate: {readmission_rate:.1f}%")
            print(f"ü§ñ Enhanced models: {len(self.predictor.models)}")
            print(f"üî¨ Medical conditions: Comprehensive lab values and clinical factors")

        except Exception as e:
            print(f"‚ùå Initialization failed: {e}")
            self.is_initialized = False
            raise

    def assess_patient_risk(self, patient_data):
        """Enhanced patient risk assessment"""
        if not self.is_initialized:
            raise ValueError("‚ùå Enhanced system must be initialized first!")

        try:
            result = self.predictor.predict_enhanced_patient_risk(patient_data)

            if 'error' in result:
                return result

            return {
                'patient_info': {
                    'patient_id': result['patient_id'],
                    'age_group': result['age_group'],
                    'assessment_timestamp': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
                },
                'risk_assessment': {
                    'risk_level': result['risk_level'],
                    'risk_percentage': result['risk_percentage'],
                    'confidence_score': result['confidence']
                },
                'model_components': {
                    'ml_probability': result['ml_probability'],
                    'clinical_score': result['clinical_score'],
                    'age_multiplier': result['age_multiplier'],
                    'ensemble_weight': 'ML: 60%, Clinical: 40%'
                },
                'clinical_recommendation': result['recommendation'],
                'risk_factors': result['risk_factors'],
                'intervention_priority': self._get_intervention_priority(result['risk_level']),
                'follow_up_timeline': self._get_follow_up_timeline(result['risk_level'])
            }

        except Exception as e:
            return {
                'patient_id': patient_data.get('patient_id', 'unknown'),
                'error': f"Enhanced assessment failed: {str(e)}",
                'risk_level': 'error'
            }

    def _get_intervention_priority(self, risk_level):
        priorities = {'low': 'Standard', 'medium': 'Enhanced', 'high': 'Urgent'}
        return priorities.get(risk_level, 'Standard')

    def _get_follow_up_timeline(self, risk_level):
        timelines = {
            'low': '1-2 weeks post-discharge',
            'medium': '3-7 days post-discharge',
            'high': '24-48 hours post-discharge'
        }
        return timelines.get(risk_level, '1-2 weeks post-discharge')

# =============================================================================
# STEP 5: INTERACTIVE PATIENT ASSESSMENT TOOL
# =============================================================================

def interactive_patient_assessment():
    """Interactive tool for live patient data modification"""
    print("üè• INTERACTIVE PATIENT RISK ASSESSMENT TOOL")
    print("=" * 60)
    print("Modify patient data to see real-time risk changes!")
    print()

    # Default patient data
    patient_data = {
        'patient_id': 'LIVE_PATIENT_001',
        'age': 18,
        'gender': 'Male',

        # Chronic conditions
        'diabetes': 0,
        'hypertension': 0,
        'heart_disease': 0,
        'kidney_disease': 0,
        'respiratory_disease': 0,

        # Hospital admissions
        'regular_ward_admission': 0,
        'semi_intensive_unit_admission': 0,
        'intensive_care_unit_admission': 0,

        # Lab values (normal ranges)
        'hemoglobin': 14,
        'hematocrit': 50.0,
        'platelets': 600,
        'red_blood_cells': 5.5,
        'lymphocytes': 2.0,
        'urea': 9.0,
        'potassium': 10.0,
        'sodium': 30,

        # Other factors
        'sars_cov2_exam_result': 0,
        'length_of_stay': 2,
        'num_medications': 4,
        'previous_admissions': 0
    }

    def assess_and_display(data):
        assessment = system.assess_patient_risk(data)

        if 'error' in assessment:
            print(f"‚ùå Error: {assessment['error']}")
            return

        print("\\n" + "="*70)
        print("üéØ LIVE PATIENT RISK ASSESSMENT")
        print("="*70)
        print(f"üë§ Patient: {assessment['patient_info']['patient_id']}")
        print(f"üìä Age Group: {assessment['patient_info']['age_group']}")
        print(f"üö® Risk Level: {assessment['risk_assessment']['risk_level'].upper()}")
        print(f"üìà Risk Percentage: {assessment['risk_assessment']['risk_percentage']:.1f}%")
        print(f"üîç Confidence: {assessment['risk_assessment']['confidence_score']:.1f}%")

        print(f"\\nü§ñ Model Breakdown:")
        print(f"   ML Probability: {assessment['model_components']['ml_probability']:.1f}%")
        print(f"   Clinical Score: {assessment['model_components']['clinical_score']:.1f}%")
        print(f"   Age Multiplier: {assessment['model_components']['age_multiplier']:.2f}x")

        if assessment['risk_factors']:
            print("\\n‚ö†Ô∏è  Risk Factors Identified:")
            for i, factor in enumerate(assessment['risk_factors'], 1):
                print(f"   {i}. {factor}")

        print(f"\\nüí° Clinical Recommendation:")
        print(f"   {assessment['clinical_recommendation']}")
        print(f"\\nüîÑ Intervention Priority: {assessment['intervention_priority']}")
        print(f"üìÖ Follow-up Timeline: {assessment['follow_up_timeline']}")
        print("="*70)

    # Initial assessment
    assess_and_display(patient_data)

    print("\\nüîß MODIFY PATIENT DATA TO SEE RISK CHANGES:")
    print("-" * 50)
    print("Try changing these values and re-run assessment:")
    print("\\nüìä Demographics:")
    print(f"  patient_data['age'] = {patient_data['age']}  # Try: 75, 85")
    print(f"  patient_data['gender'] = '{patient_data['gender']}'")

    print("\\nüè• Chronic Conditions (0=No, 1=Yes):")
    for condition in ['diabetes', 'hypertension', 'heart_disease', 'kidney_disease', 'respiratory_disease']:
        print(f"  patient_data['{condition}'] = {patient_data[condition]}  # Try: 1")

    print("\\nüè• Hospital Admission Types (0=No, 1=Yes):")
    print(f"  patient_data['regular_ward_admission'] = {patient_data['regular_ward_admission']}")
    print(f"  patient_data['semi_intensive_unit_admission'] = {patient_data['semi_intensive_unit_admission']}  # Try: 1")
    print(f"  patient_data['intensive_care_unit_admission'] = {patient_data['intensive_care_unit_admission']}  # Try: 1")

    print("\\nüî¨ Lab Values:")
    print(f"  patient_data['hemoglobin'] = {patient_data['hemoglobin']}  # Try: 8.0 (severe anemia)")
    print(f"  patient_data['platelets'] = {patient_data['platelets']}  # Try: 80 (low)")
    print(f"  patient_data['urea'] = {patient_data['urea']}  # Try: 15.0 (high)")

    print("\\nüìã Other Factors:")
    print(f"  patient_data['sars_cov2_exam_result'] = {patient_data['sars_cov2_exam_result']}  # Try: 1")
    print(f"  patient_data['length_of_stay'] = {patient_data['length_of_stay']}  # Try: 15")
    print(f"  patient_data['previous_admissions'] = {patient_data['previous_admissions']}  # Try: 3")

    print("\\nüîÑ EXAMPLE - HIGH RISK PATIENT:")
    print("Copy and run this to see a high-risk assessment:")

    high_risk_example = patient_data.copy()
    high_risk_example.update({
        'age': 78,
        'diabetes': 1,
        'hypertension': 1,
        'heart_disease': 1,
        'kidney_disease': 1,
        'intensive_care_unit_admission': 1,
        'hemoglobin': 8.2,
        'platelets': 95,
        'urea': 12.0,
        'sars_cov2_exam_result': 1,
        'length_of_stay': 18,
        'previous_admissions': 3
    })

    print("\\nhigh_risk_patient = patient_data.copy()")
    print("high_risk_patient.update({")
    for key, value in high_risk_example.items():
        if key != 'patient_id' and high_risk_example[key] != patient_data[key]:
            print(f"    '{key}': {value},")
    print("})")
    print("assessment = system.assess_patient_risk(high_risk_patient)")

    return patient_data, assess_and_display

# =============================================================================
# STEP 6: MAIN EXECUTION
# =============================================================================

def main():
    """Main execution with enhanced system"""
    try:
        print("üöÄ ENHANCED PATIENT-CENTRIC READMISSION PREDICTION SYSTEM")
        print("=" * 85)
        print("üî¨ Features: Comprehensive medical conditions, >90% accuracy target, interactive assessment")
        print()

        # Initialize enhanced system
        global system
        system = EnhancedPatientCentricSystem()
        system.initialize_system()

        print("\\n" + "="*85)
        print("üéâ ENHANCED SYSTEM READY FOR LIVE PATIENT ASSESSMENT!")
        print("="*85)

        # Setup interactive assessment
        patient_data, assess_function = interactive_patient_assessment()

        # Make tools available globally
        globals()['system'] = system
        globals()['patient_data'] = patient_data
        globals()['assess_patient'] = assess_function

        return system, patient_data, assess_function

    except Exception as e:
        print(f"üí• ENHANCED SYSTEM ERROR: {e}")
        return None, None, None

# Run the enhanced system
if __name__ == "__main__":
    system, patient_data, assess_patient = main()

from google.colab import drive
drive.mount('/content/drive')